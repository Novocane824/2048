// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var boardFull, collapseCells, generateTile, getColumn, getRandomCell, getRow, mergeCells, move, ppArray, randomInt, randomValue, setColumn, setRow, x, y, _i, _j;
    this.board = [0, 1, 2, 3].map(function() {
      return [0, 1, 2, 3].map(function() {
        return 0;
      });
    });
    for (x = _i = 0; _i <= 3; x = ++_i) {
      this.board[x] = [];
      for (y = _j = 0; _j <= 3; y = ++_j) {
        this.board[x][y] = 0;
      }
    }
    ppArray = function(array) {
      var row, _k, _len, _results;
      _results = [];
      for (_k = 0, _len = array.length; _k < _len; _k++) {
        row = array[_k];
        _results.push(console.log(row));
      }
      return _results;
    };
    getRow = function(row, board) {
      return board[row];
    };
    getColumn = function(cNumber, board) {
      var b, c;
      b = board;
      c = cNumber;
      return [b[0][c], b[1][c], b[2][c], b[3][c]];
    };
    setRow = function(row, rowNumber, board) {
      return board[rowNumber] = row;
    };
    setColumn = function(newArray, cNumber, board) {
      var b, c;
      b = board;
      c = cNumber;
      return b[0][c] = newArray[0], b[1][c] = newArray[1], b[2][c] = newArray[2], b[3][c] = newArray[3], newArray;
    };
    randomInt = function(x) {
      return Math.floor(Math.random() * x);
    };
    getRandomCell = function() {
      return [randomInt(4), randomInt(4)];
    };
    randomValue = function() {
      var val, values;
      values = [2, 2, 2, 4];
      return val = values[randomInt(values.length)];
    };
    boardFull = function(board) {
      var _k, _l;
      for (x = _k = 0; _k <= 3; x = ++_k) {
        for (y = _l = 0; _l <= 3; y = ++_l) {
          if (board[x][y] === 0) {
            return false;
          }
        }
      }
      return true;
    };
    generateTile = function(board) {
      var val, _ref;
      if (!boardFull(board)) {
        val = randomValue();
        _ref = getRandomCell(), x = _ref[0], y = _ref[1];
        if (board[x][y] === 0) {
          return board[x][y] = val;
        } else {
          return generateTile(board);
        }
      }
    };
    console.log(generateTile(this.board));
    move = function(board, direction) {
      var c, i, row, _k, _l, _m, _n;
      switch (direction) {
        case 'left':
          for (i = _k = 0; _k <= 3; i = ++_k) {
            row = getRow(i, board);
            row = mergeCells(row, 'left');
            row = collapseCells(row, 'left');
            setRow(row, i, board);
          }
          break;
        case 'right':
          for (i = _l = 0; _l <= 3; i = ++_l) {
            row = getRow(i, board);
            row = mergeCells(row, 'right');
            row = collapseCells(row, 'right');
            setRow(row, i, board);
          }
          break;
        case 'up':
          for (i = _m = 0; _m <= 3; i = ++_m) {
            c = getColumn(i, board);
            c = mergeCells(c, 'up');
            c = collapseCells(c, 'up');
            setColumn(c, i, board);
          }
          break;
        case 'down':
          for (i = _n = 0; _n <= 3; i = ++_n) {
            c = getColumn(i, board);
            c = mergeCells(c, 'down');
            c = collapseCells(c, 'down');
            setColumn(c, i, board);
          }
      }
      return generateTile(board);
    };
    $('body').keydown((function(_this) {
      return function(e) {
        var key, keys;
        key = e.which;
        keys = [37, 38, 39, 40];
        if ($.inArray(key, keys) > -1) {
          e.preventDefault();
        }
        switch (key) {
          case 37:
            console.log('left');
            move(_this.board, 'left');
            return ppArray(_this.board);
          case 38:
            console.log('up');
            move(_this.board, 'up');
            return ppArray(_this.board);
          case 39:
            console.log('right');
            move(_this.board, 'right');
            return ppArray(_this.board);
          case 40:
            console.log('down');
            move(_this.board, 'down');
            return ppArray(_this.board);
        }
      };
    })(this));
    ppArray(this.board);
    mergeCells = function(originalCells, direction) {
      var cells, _k, _l, _m, _n, _ref, _ref1;
      cells = originalCells;
      switch (direction) {
        case 'left':
        case 'up':
          for (x = _k = 0; _k < 3; x = ++_k) {
            for (y = _l = _ref = x + 1; _ref <= 3 ? _l <= 3 : _l >= 3; y = _ref <= 3 ? ++_l : --_l) {
              if (cells[x] === 0) {
                break;
              } else if (cells[x] === cells[y]) {
                cells[x] *= 2;
                cells[y] = 0;
                break;
              } else if (cells[y] !== 0) {
                break;
              }
            }
          }
          break;
        case 'right':
        case 'down':
          for (x = _m = 3; _m > 0; x = --_m) {
            for (y = _n = _ref1 = x - 1; _ref1 <= 0 ? _n <= 0 : _n >= 0; y = _ref1 <= 0 ? ++_n : --_n) {
              if (cells[x] === 0) {
                break;
              } else if (cells[x] === cells[y]) {
                cells[x] *= 2;
                cells[y] = 0;
                break;
              } else if (cells[y] !== 0) {
                break;
              }
            }
          }
      }
      return cells;
    };
    return collapseCells = function(originalCells, direction) {
      var cells, count, countZero, i, temp, _k, _l, _m;
      cells = originalCells;
      countZero = function(array) {
        var count, _k, _len;
        count = 0;
        for (_k = 0, _len = array.length; _k < _len; _k++) {
          x = array[_k];
          if (x === 0) {
            count = count + 1;
          }
        }
        return count;
      };
      console.log("counting 0's: " + countZero([0, 2, 2, 0]));
      count = countZero(originalCells);
      for (i = _k = 0; 0 <= count ? _k < count : _k > count; i = 0 <= count ? ++_k : --_k) {
        switch (direction) {
          case 'left':
          case 'up':
            for (x = _l = 0; _l < 3; x = ++_l) {
              temp = cells[x];
              if (cells[x] === 0) {
                cells[x] = cells[x + 1];
                cells[x + 1] = temp;
              }
            }
            break;
          case 'right':
          case 'down':
            for (x = _m = 3; _m > 0; x = --_m) {
              temp = cells[x];
              if (cells[x] === 0) {
                cells[x] = cells[x - 1];
                cells[x - 1] = temp;
              }
            }
        }
      }
      return cells;
    };
  });

}).call(this);

//# sourceMappingURL=main.map
